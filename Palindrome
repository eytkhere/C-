#include <iostream>
#include <string.h>

using namespace std;

/*
Palindrome Number
*/

// function to check if first and last digit of dynamic array are the same. Using recursive to solve

void palindrome_recursive(int *str_pt, int len_str_1){
    if(len_str_1 == 0 || len_str_1 == 1){
        cout << "IS a palindrome" << endl;
    }
    else if(*str_pt == *(str_pt + len_str_1-1)){
        palindrome_recursive(str_pt+1, len_str_1-2);
    }else{
        cout << "NOT a palindrome" << endl;
    }
}

// finding amount of digits in number

int find_size(int num){
    int i = num, sum = 0;
    while(num != 0){
        num = num/10;
        sum++;
    }
    return(sum);
}

// option to print each digit in dynamic array

void Print_arr(int *str_pt, int len_str_1){
    int i;
    for(i=0; i<len_str_1; i++){
        cout << i << ": " << *(str_pt+i) << endl;
    }
}

int main()
{
    int arr1[3] = {1234321, 1234554321, 123564321};
    int i = 0;
    int len_arr1 = sizeof(arr1)/sizeof(int);
        for(i; i< len_arr1; i++){
            int j = 0;
            int sum = find_size(arr1[i]);
            int *arr_split = new int[sum];
            int temp = arr1[i];
                for(j; j < sum; j++){
                    arr_split[j] = temp%10;
                    temp = temp/10;
                    //cout << temp << endl;
                    // << j << ": " << arr_split[j] << endl;
                }
            //Print_arr(arr_split, sum);
            palindrome_recursive(arr_split, sum);
            delete arr_split;
    }

    cout << "END" << endl;
}
